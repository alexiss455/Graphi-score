//jshint esversion:6
const express = require("express");
const bodyParser = require("body-parser");
const ejs = require("ejs");
const mongoose = require("mongoose");
// cookies and session
const passportLocalMongoose = require('passport-local-mongoose');
const session = require('express-session');
const passport = require('passport');

const fs = require('fs');
const { validateHeaderName } = require("http");
const app = express();

app.use(express.static("public"));
app.set('view engine', 'ejs');
app.use(bodyParser.urlencoded({extended: true}));

const multer = require('multer');

app.use(session({
  secret: "Our little secret.",
  resave: false,
  saveUninitialized: false
}));
app.use(passport.initialize());
app.use(passport.session());

mongoose.set('strictQuery', false);
mongoose.connect('mongodb://127.0.0.1:27017/userDB',{ useNewUrlParser: true});

// register user db
const userSchema = new mongoose.Schema({
  username: String,
  password: String,
  displayName:String,
  bio:String,
  profilePicture: Buffer
});

// product collections-------
const productSchema = new mongoose.Schema({
  productName: String,
  productImage: Buffer,
  productDscrp: String
});
const Product = mongoose.model("Product", productSchema);


// *-------------------------
userSchema.plugin(passportLocalMongoose);
// userSchema.plugin(findOrCreate);

const User = mongoose.model("User", userSchema);
passport.use(User.createStrategy());

passport.serializeUser(function(user, done) {
    done(null, user.id);
})
passport.deserializeUser(function(id, done) {
    User.findById(id, function(err, user) {
        done(err, user);
    });
});

//relation between user and product
const reviewSchema = new mongoose.Schema({
  review: String,
  rate: {
    type: Number,
    required: true
  },
  date: {
    type: Date,
    default: Date.now
  },
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  product: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Product',
    required: true
  }
});

const Review = mongoose.model("Review", reviewSchema);

//multer
const storage = multer.diskStorage({
  destination: function(req, file, cb) {
    cb(null, 'uploads/'); 
  },
  filename: function(req, file, cb) {
    cb(null, Date.now() + path.extname(file.originalname)); 
  }
});
const upload = multer({
  storage: storage,
  fileFilter: function(req, file, cb) {
    const filetypes = /jpeg|jpg|png|gif/; // define the allowed file types
    const extname = filetypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = filetypes.test(file.mimetype);
    if (extname && mimetype) {
      cb(null, true);
    } else {
      cb(new Error('Only image files are allowed')); // reject the file if it's not an image file
    }
  },
  limits: { fileSize: 5000000 } // set a file size limit of 5MB
});
//


app.use(express.json());
app.use(function(req, res, next) {
  if (req.isAuthenticated()) {
    res.locals.padala = "iflogin";
    res.locals.displayName = req.user.displayName;
  } else {
    res.locals.padala = "ifnotlogin";
  }
  next();
});
function checkAuthenticated(req, res, next) {
  if (req.isAuthenticated()) {
    return res.redirect("/");
  }
  next();
} 
function checkIfNotAuthenticated(req, res, next) {
  if (!req.isAuthenticated()) {
    return res.redirect('/login');
  }
  next();
}

app.get("/", function(req, res) {
  Review.aggregate([
  {
    $group: {
      _id: "$product",
      count: { $sum: { $cond: [{ $ne: ["$review", ""] }, 1, 0] } },
      average: { $avg: "$rate" },
      users: { $addToSet: "$user" }
    }
  },
  {
    $lookup: {
      from: "products",
      localField: "_id",
      foreignField: "_id",
      as: "product"
    }
  },
  {
    $unwind: "$product"
  },
    {
      $project: {
        _id: "$product._id",
        productName: "$product.productName",
        productDscrp: "$product.productDscrp",
        productImage: "$product.productImage",
        average: 1,
        totalReviews: { $sum: "$count" },
        ratings: { $size: "$users" }
      }
    },
  {
    $sort: { ratings: -1, count: -1 }
  },
  {
    $limit: 5
  }
])
.exec(function (err, results) {
  if (err) {
    res.render("home");
  } else {
    results.forEach(function(product) {
      if (product.productImage) {
        product.productImage = product.productImage.toString('base64');
      }
      if (product.average) {
        product.average = parseFloat(product.average.toFixed(1));
      }
    });
    res.render('home', { mostRated: results });
  }
});
});

app.get('/review-count', async function(req, res) {
  const productId = req.query.id;
  
  const result = await Review.aggregate([
  { $match: { 'product': mongoose.Types.ObjectId(productId) } },
  {
    $group: {
      _id: '$user',
      hasReview: { $sum: { $cond: [{ $ne: ['$review', ''] }, 1, 0] } },
      hasRating: { $sum: { $cond: [{ $ne: ['$rate', ''] }, 1, 0] } },
      avgRating: { $avg: '$rate' },
    }
  },
  {
    $group: {
      _id: null,
      reviewCount: { $sum: '$hasReview' },
      rateCount: { $sum: '$hasRating' },
      avgRating: { $avg: '$avgRating' },
    }
  }
  ]).exec();

  if (result[0] && result[0].avgRating) {
    result[0].avgRating = parseFloat(result[0].avgRating.toFixed(1));
  }

  const resultObj = result[0] || { reviewCount: 0, rateCount: 0, avgRating: 0 };
  res.json(resultObj);

});

app.get('/review', checkIfNotAuthenticated, function(req, res) {
  productPrev = [{
    productName: "",
    totalReviews: "",
    ratings: "",
    average: "",
    productImage: ""
  }]
  res.render('review' ,{productPrev: productPrev});
});

app.get("/graphiscore", function(req, res) {
  res.render("graphiscore");
});

app.get("/login", checkAuthenticated, function(req, res) {
  res.render("login");
});

app.get("/register", checkAuthenticated, function(req, res) {
  res.render("register");
});

app.post("/register", function(req, res) {
  User.register({username: req.body.username, displayName: req.body.display_name}, req.body.password, function(err, user) {
    if (err) {
      console.log(err);
      res.redirect("/register");  
    } else {
        passport.authenticate("local")(req, res, function() {
          req.session.padala = "iflogin";
          req.session.displayName = req.user.displayName;
          res.redirect("/");
        });
    }
  });
});
app.post("/login", function(req, res) {
  const user = new User ({
    username: req.body.username,
    password: req.body.password
});

req.login(user, function(err) {
    if (err) {
        console.log(err);
    } else {
        passport.authenticate("local", { failureRedirect: '/login' })(req, res, function() {
          req.session.padala = "iflogin";
          req.session.displayName = req.user.displayName;
          res.redirect("/");
        });
    }
});
});

app.get("/logout", function(req, res) {
  req.logout(function(err) {
      if (err) {
        console.error(err);
        return res.status(500).send('An error occurred while logging out.');
      }
      req.session.destroy(function (err) {
          res.redirect("/");
        });
    });
});

app.get('/search', (req, res) => {
  const searchTerm = req.query.q;
  let query = {};
  if (searchTerm !== '') {
    query.productName = { $regex: searchTerm, $options: 'i' };
  }
  Product.find(query, (err, products) => {
    if (err) {
      console.log(err);
    } else {
      const productData = products.map(product => ({
        _id: product._id,
        productName: product.productName,
        productImage: product.productImage.toString('base64')
      }));
      res.send(productData);
    }
  });
});

app.get('/allproducts', (req, res) => {
  Product.find({}, (err, products) => {
    if (err) {
      console.log(err);
      res.sendStatus(500);
    } else {
      const productData = products.map(product => ({
        _id: product._id,
        productName: product.productName,
        productImage: product.productImage.toString('base64')
      }));
      res.send(productData);
    }
  });
});

app.post("/review", async (req, res) => {
  const productName= req.body.search_product_review;
  const productReview = req.body.review_product;
  const rateStar = req.body.rate;

  const foundProduct = await Product.findOne({ productName: productName });
  
  if (foundProduct) {
    const existingReview = await Review.findOne({
      user: req.user,
      product: foundProduct,
    });
    
    if (existingReview) {
      existingReview.review = productReview;
      existingReview.rate = rateStar;
      existingReview.save(function (err) {
        if (err) {
          console.log(err);
        } else {
          console.log("Success update");
          res.redirect("/graphiscore/"+foundProduct._id);
        }
      });
    }
    else {
      const newReview = new Review({
        review: productReview,
        rate: rateStar,
        user: req.user,
        product: foundProduct
      });
  
      newReview.save(function (err) {
        if (err) {
          console.log(err);
        } else {
          console.log("Success add");
          res.redirect("/graphiscore/"+foundProduct._id);
        }
      });
    }
  } else {
    console.log("User not found!!!");
  }
});

app.get("/graphiscore/:_id", function(req, res){
  let getUrl = req.params._id;

  Product.aggregate()
    .match({ _id: mongoose.Types.ObjectId(getUrl) })
    .lookup({
      from: "reviews",
      let: { productId: "$_id" },
      pipeline: [
        {
          $match: {
            $expr: { $eq: ["$product", "$$productId"] }
          }
        },
        {
          $lookup: {
            from: "users",
            localField: "user",
            foreignField: "_id",
            as: "userObj"
          }
        },
        {
          $unwind: "$userObj"
        },
        {
          $project: {
            _id: "$user",
            displayName: "$userObj.displayName",
            rate: "$rate",
            review: "$review",
            date: "$date"
          }
        }
      ],
      as: "reviews"
    })
    .project({
      _id: 1,
      productName: 1,
      productDscrp: 1,
      productImage: 1,
      average: {
        $avg: "$reviews.rate"
      },
      totalReviews: {
        $size: "$reviews"
      },
      ratings: {
        $size: {
          $setUnion: ["$reviews._id"]
        }
      },
      reviews: 1
    })  
  .exec((err, productPrev) => {
   
    if (productPrev.length === 0) {
      res.render("error", { message: "Product not found" });
    } else {
      if (productPrev[0].productImage) {
        productPrev[0].productImage = productPrev[0].productImage.toString('base64');
      }
      if (productPrev[0].average) {
        productPrev[0].average = parseFloat(productPrev[0].average.toFixed(1));
      }
      productPrev[0].reviews.forEach(element => {
       console.log(element._id);
        if (element.date) {
          element.date = element.date.toLocaleString("en-US", {
            month: "2-digit",
            day: "2-digit",
            year: "numeric",
            hour: "numeric",
            minute: "numeric",
            second: "numeric",
            hour12: true,
          });
        }
      });
      res.render("product", { productPrev: productPrev });
    }
  });

});

app.get("/review/:_id", checkIfNotAuthenticated, function(req, res){
  const getUrl = req.params._id;
  Review.aggregate([
    {
      $match: { product: mongoose.Types.ObjectId(getUrl) }
    },
    {
      $group: {
        _id: "$product",
        count: { $sum: { $cond: [{ $ne: ["$review", ""] }, 1, 0] } },
        average: { $avg: "$rate" },
        users: { $addToSet: "$user" },
      }
    },
    {
      $lookup: {
        from: "products",
        localField: "_id",
        foreignField: "_id",
        as: "product"
      }
    },
    {
      $unwind: "$product"
    },
    {
      $project: {
        _id: "$product._id",
        productName: "$product.productName",
        productImage: "$product.productImage",
        average: { $round: ["$average", 1] },
        totalReviews: { $sum: "$count" },
        ratings: { $size: "$users" },
        reviews: 1
      }
    }
  ])
  .exec((err, productPrev) => {
    if (err) {
      console.error(err);
    } else {
      if (productPrev[0].productImage) {
        productPrev[0].productImage = productPrev[0].productImage.toString('base64');
      }
      res.render("review", { productPrev: productPrev });
    }
  });

});


async function account(id) {
  try {
    const user = await User.findById(id)
    const reviews = await Review.find({ user: id })
      .populate("product", "productName productImage")
      .select("rate review date")
      .lean();

    // format date and base64 encode product image
    reviews.forEach((review) => {
      if (review.product.productImage) {
        review.product.productImage = review.product.productImage.toString("base64");
      }
      if (review.date) {
        review.date = review.date.toLocaleString("en-US", {
          month: "2-digit",
          day: "2-digit",
          year: "numeric",
          hour: "numeric",
          minute: "numeric",
          second: "numeric",
          hour12: true,
        });
      }
    });

    const reviewCount = await Review.countDocuments({ user: id })
    const rateCount = await Review.countDocuments({ user: id, rate: { $exists: true } })
    return {
      user: {
        displayName: user.displayName,
        bio: user.bio,
        profilePicture: user.profilePicture
      },
      reviewCount,
      rateCount,
      reviews
    }
  } catch (err) {
    console.error(err)
  }
}



app.get("/profile", checkIfNotAuthenticated, function(req, res) {
  const userId = req.user._id;
  
  account(userId).then((currentUser) => {
    console.log(currentUser);
    res.render('profile', {
      currentUser: currentUser,
      hideButtons: false
    });
  }).catch((err) => {
    console.log(err);
    res.redirect('/');
  });
});


// other users profile with search
app.get("/profile/:_id", function(req, res) {
  let getUrl = req.params._id;
  console.log(getUrl)
  User.findById(getUrl, function(err, foundId) {
    console.log(foundId)
    account(foundId._id)
 
  .then((result) => {
    res.render("profile", { currentUser: result, hideButtons: true });
  })
  .catch((error) => {
    console.log(error);
    res.render("error");
  });
  })
});

app.get("/account-setting", function(req, res) {
  let getUrl = req.user._id;

  account(getUrl)
 
  .then((result) => {
    res.render("account-setting", { currentUser:result });
  })
  .catch((error) => {
    console.log(error);
    res.render("error");
  });
  });



app.post("/account-setting", upload.single('profilePicture'), async function(req, res) {
  const displayName = req.body.displayName;
  const bio = req.body.bio;
  const profilePicture = req.body.imageData;
  const userId = req.user._id;

  // Create or update the user in the database
  User.findOneAndUpdate({ _id: userId }, { displayName, bio, profilePicture }, { upsert: true })
    .then((updatedUser) => {
      console.log('User updated:', updatedUser);
      res.redirect('/account-setting');
    })
    .catch((error) => {
      console.error('Error updating user:', error);
      res.redirect('/error');
    });
})






app.listen(3000, function() {
  console.log("Server started on port 3000");
});
